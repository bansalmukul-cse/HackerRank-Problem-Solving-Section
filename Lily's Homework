#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'lilysHomework' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

int lilysHomework(vector<int> arr) {
    vector<int> sortedINC = arr;
    vector<int> sortedDESC = arr;
    vector<int> arr2 = arr;
    sort(begin(sortedINC), end(sortedINC)); // 1 2 3 4
    sort(begin(sortedDESC), end(sortedDESC), greater<int>()); // 4 3 2 1
    unordered_map<int, int> valIdxMapINC, valIdxMapDESC;// {val, its idx in sorted order}
    // Get sorted indices for INC
    for (int i = 0; i < sortedINC.size(); i++) {
        valIdxMapINC[sortedINC[i]] = i;
    }
    // Get sorted indices for DESC
    for (int i = 0; i < sortedDESC.size(); i++) {
        valIdxMapDESC[sortedDESC[i]] = i;
    }
    int szI = 0, szD = 0, size = arr.size() - 1;
    // Inc
    for (int i = 0; i < arr.size(); i++) {
        if (arr[i] != sortedINC[i]) {
            swap(arr[i], arr[valIdxMapINC[arr[i]]]);
            szI++;
            i--;
        }
    }
    // Desc
    for (int i = 0; i < arr2.size(); i++) {
        if (arr2[i] != sortedDESC[i]) {
            swap(arr2[i], arr2[valIdxMapDESC[arr2[i]]]);
            szD++;
            i--;
        }
    }
    return min(szI, szD);

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split(rtrim(arr_temp_temp));

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    int result = lilysHomework(arr);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
